% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hu-read-html.R
\name{hu_read_html}
\alias{hu_read_html}
\title{Read HTML from a URL with Browser Emulation & in a JavaScript Context}
\usage{
hu_read_html(url, emulate = c("best", "chrome", "firefox", "ie"),
  ret = c("html_document", "text"), js_delay = 2000L,
  timeout = 30000L, ignore_ssl_errors = TRUE, enable_dnt = FALSE,
  download_images = FALSE, options = c("RECOVER", "NOERROR",
  "NOBLANKS"))
}
\arguments{
\item{url}{URL to retrieve}

\item{emulate}{browser to emulate; one of "`best`", "`chrome`", "`firefox`", "`ie`"}

\item{ret}{what to return; if `html_document` (the default) then the HTML created
by the `HtmlUnit` emulated browser context is passed to [xml2::read_html()]
and an `xml2` `html_document`/`xml_document` is returned. Note that this causes
further HTML processing by `xml2`/`libxml2` so is not _exactly_ what
`HtmlUnit` generated. If you want the HTML code (text) without any further
processing then use `text` as the value.}

\item{js_delay}{time (ms) to let loaded javascript to execute; default is 2 seconds (2000 ms)}

\item{timeout}{overall timeout (ms); `0` == infinite wait (not recommended); note: the
timeout is used twice: first in making the socket connection,
second for data retrieval. If the time is critical you must
allow for twice the time specified here. Default 30s (30000 ms)}

\item{ignore_ssl_errors}{Should SSL/TLS errors be ignored. The default (`TRUE`) is
a current hack due to how `HtmlUnit` seems to handle virtual hosted sites
with multiple vhosts and multiple certificates. You can try it with `FALSE`
initially and revert back to `TRUE` if you encounter issues.}

\item{enable_dnt}{Enable the "Do Not Track" header. Default: `FALSE`.}

\item{download_images}{Download images as the page is loaded? Since this
function is a high-level wrapper designed to do a read of HTML,
it is recommended that you leave this the default `FALSE` to save
time/bandwidth.}

\item{options}{options to pass to [xml2::read_html()] if `ret` == `html_document`.}
}
\value{
an `xml2` `html_document`/`xml_document` if `ret` == `html_document` else
        the HTML document text generated by `HtmlUnit`.
}
\description{
Use a JavaScript-enabled browser context to read and render HTML from a URL.
}
\details{
For the code in the examples, this is the site that is being scraped:

\if{html}{
\figure{test-url-table.png}{options: width="100\%" alt="Figure: test-url-table.png"}
}

\if{latex}{
\figure{test-url-table.png}{options: width=10cm}
}

Note that it has a table of values but it is rendered via JavaScript.
}
\examples{
\dontrun{
test_url <- "https://hrbrmstr.github.io/htmlunitjars/index.html"
hu_read_html(test_url)
}
}
